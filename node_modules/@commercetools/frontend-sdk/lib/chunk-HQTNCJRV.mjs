// src/library/Queue.ts
var Queue = class {
  #queue = [];
  #promisePending = false;
  #stopped = false;
  add(promise) {
    return new Promise((resolve, reject) => {
      this.#queue.push({
        promise,
        resolve,
        reject
      });
      this.#handle();
    });
  }
  stop() {
    this.#stopped = true;
  }
  restart() {
    this.#stopped = false;
    this.#handle();
  }
  #handle() {
    if (this.#promisePending || this.#stopped) {
      return;
    }
    const item = this.#queue.shift();
    if (!item) {
      return;
    }
    try {
      this.#promisePending = true;
      item.promise().then((value) => this.#resolve(() => item.resolve(value))).catch((err) => this.#resolve(() => item.reject(err)));
    } catch (err) {
      this.#resolve(() => item.reject(err));
    }
  }
  #resolve(callback) {
    this.#promisePending = false;
    callback();
    this.#handle();
  }
};

export {
  Queue
};
//# sourceMappingURL=chunk-HQTNCJRV.mjs.map