{"version":3,"sources":["../src/index.ts","../src/library/oldCookieHandler.ts","../src/constants/rememberMeCookieKey.ts","../src/helpers/oldCookieManagement.ts","../src/constants/defaultSessionLifetime.ts","../src/constants/sdkNotConfiguredErrorMessage.ts","../src/library/DependencyContainer.ts","../src/helpers/cookieManagement.ts","../src/library/Extension.ts","../src/library/Integration.ts","../src/library/FetchError.ts","../src/helpers/fetcher.ts","../src/library/Queue.ts","../src/library/Event.ts","../src/library/EventManager.ts","../src/library/ActionError.ts","../src/library/PageError.ts","../src/helpers/queryStringHelpers.ts","../src/library/CookieHandler.ts","../src/library/SDK.ts"],"sourcesContent":["import { rememberMeCookie, serverSession } from \"./helpers/oldCookieManagement\";\nimport { rememberMeCookieAsync } from \"./helpers/cookieManagement\";\nimport { Extension } from \"./library/Extension\";\nimport { Integration } from \"./library/Integration\";\nimport { SDK } from \"./library/SDK\";\nimport { Event } from \"./library/Event\";\nimport { FetchError } from \"./library/FetchError\";\nimport { ActionError } from \"./library/ActionError\";\nimport { PageError } from \"./library/PageError\";\nimport { SDKResponse } from \"./types/SDKResponse\";\nimport { ServerOptions } from \"./types/cookieHandling\";\nimport { CookieHandler } from \"./library/CookieHandler\";\nimport { CookieManager } from \"./types/cookieHandling/CookieManager\";\n\nexport {\n\tSDK,\n\tExtension,\n\tIntegration,\n\tEvent,\n\tFetchError,\n\tActionError,\n\tPageError,\n\tSDKResponse,\n\trememberMeCookie,\n\trememberMeCookieAsync,\n\tserverSession,\n\tServerOptions,\n\tCookieHandler,\n\tCookieManager,\n};\n","import { serialize, parse } from \"cookie\";\nimport {\n\tServerOptions,\n\tTmpCookiesObj,\n\tCookieValueTypes,\n} from \"../types/cookieHandling\";\n\n// DEPRECATED, DO NOT USE. This class only exists to satisfy backwards compatability for deprecated methods in ../helpers/cookieManagementOld.ts\nexport class CookieHandlerSync {\n\tstatic isClientSide(): boolean {\n\t\treturn typeof window !== \"undefined\";\n\t}\n\n\tstatic stringify(value: string = \"\"): string {\n\t\ttry {\n\t\t\tconst result = JSON.stringify(value);\n\t\t\treturn /^[\\{\\[]/.test(result) ? result : value;\n\t\t} catch (e) {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tstatic decode(str: string): string {\n\t\treturn str ? str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent) : str;\n\t}\n\n\tstatic processValue(value: string): CookieValueTypes {\n\t\tswitch (value) {\n\t\t\tcase \"true\":\n\t\t\t\treturn true;\n\t\t\tcase \"false\":\n\t\t\t\treturn false;\n\t\t\tcase \"undefined\":\n\t\t\t\treturn undefined;\n\t\t\tcase \"null\":\n\t\t\t\treturn null;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n\n\tstatic getCookies(options?: ServerOptions): TmpCookiesObj {\n\t\tlet req;\n\t\tif (options) {\n\t\t\treq = options.req;\n\t\t}\n\t\tif (!this.isClientSide()) {\n\t\t\t// if cookie-parser is used in project, get cookies from ctx.req.cookies\n\t\t\t// if cookie-parser isn't used in project, get cookies from ctx.req.headers.cookie\n\t\t\tif (req?.cookies) {\n\t\t\t\treturn req.cookies;\n\t\t\t}\n\t\t\tif (req?.headers?.cookie) {\n\t\t\t\treturn parse(req.headers.cookie);\n\t\t\t}\n\t\t\treturn {};\n\t\t}\n\n\t\tconst _cookies: TmpCookiesObj = {};\n\t\tconst documentCookies = document.cookie\n\t\t\t? document.cookie.split(\"; \")\n\t\t\t: [];\n\n\t\tfor (let i = 0, len = documentCookies.length; i < len; i++) {\n\t\t\tconst cookieParts = documentCookies[i].split(\"=\");\n\n\t\t\tconst _cookie = cookieParts.slice(1).join(\"=\");\n\t\t\tconst name = cookieParts[0];\n\n\t\t\t_cookies[name] = _cookie;\n\t\t}\n\n\t\treturn _cookies;\n\t}\n\n\tstatic hasCookie(key: string, options?: ServerOptions): boolean {\n\t\tif (!key) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst cookie = this.getCookies(options);\n\t\treturn cookie.hasOwnProperty(key);\n\t}\n\n\tstatic setCookie(key: string, data: any, options?: ServerOptions): void {\n\t\tlet _cookieOptions: any;\n\t\tlet _req;\n\t\tlet _res;\n\t\tif (options) {\n\t\t\tconst { req, res, ..._options } = options;\n\t\t\t_req = req;\n\t\t\t_res = res;\n\t\t\t_cookieOptions = _options;\n\t\t}\n\n\t\tconst cookieStr = serialize(key, this.stringify(data), {\n\t\t\tpath: \"/\",\n\t\t\t..._cookieOptions,\n\t\t});\n\t\tif (!this.isClientSide()) {\n\t\t\tif (_res && _req) {\n\t\t\t\tlet currentCookies = _res.getHeader(\"Set-Cookie\");\n\n\t\t\t\tif (!Array.isArray(currentCookies)) {\n\t\t\t\t\tcurrentCookies = !currentCookies\n\t\t\t\t\t\t? []\n\t\t\t\t\t\t: [String(currentCookies)];\n\t\t\t\t}\n\t\t\t\t_res.setHeader(\"Set-Cookie\", currentCookies.concat(cookieStr));\n\n\t\t\t\tif (_req && _req.cookies) {\n\t\t\t\t\tconst _cookies = _req.cookies;\n\t\t\t\t\tdata === \"\"\n\t\t\t\t\t\t? delete _cookies[key]\n\t\t\t\t\t\t: (_cookies[key] = this.stringify(data));\n\t\t\t\t}\n\n\t\t\t\tif (_req && _req.headers && _req.headers.cookie) {\n\t\t\t\t\tconst _cookies = parse(_req.headers.cookie);\n\n\t\t\t\t\tdata === \"\"\n\t\t\t\t\t\t? delete _cookies[key]\n\t\t\t\t\t\t: (_cookies[key] = this.stringify(data));\n\n\t\t\t\t\t_req.headers.cookie = Object.entries(_cookies).reduce(\n\t\t\t\t\t\t(accum, item) => {\n\t\t\t\t\t\t\treturn accum.concat(`${item[0]}=${item[1]};`);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.cookie = cookieStr;\n\t\t}\n\t}\n\n\tstatic getCookie(key: string, options?: ServerOptions): CookieValueTypes {\n\t\tconst _cookies = this.getCookies(options);\n\t\tconst value = _cookies[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.processValue(this.decode(value));\n\t}\n\n\tstatic deleteCookie(key: string, options?: ServerOptions): void {\n\t\tthis.setCookie(key, \"\", { ...options, maxAge: -1 });\n\t}\n}\n","export const REMEMBER_ME_COOKIE_KEY = \"__rememberMe\";\n","import { IncomingMessage, ServerResponse } from \"http\";\nimport { ServerOptions } from \"../types/cookieHandling\";\nimport { CookieHandlerSync } from \"../library/oldCookieHandler\";\nimport { REMEMBER_ME_COOKIE_KEY } from \"../constants/rememberMeCookieKey\";\n\n/**\n * @deprecated Use rememberMeCookieAsync instead. An object containing helper methods for interacting with the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.\n */\nexport const rememberMeCookie = {\n\t/**\n\t * @deprecated Use rememberMeCookieAsync.get instead. Gets the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.\n\t *\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {boolean} A boolean indicating whether or not the user is to be remembered.\n\t */\n\tget: function (serverOptions?: ServerOptions): boolean {\n\t\tif (\n\t\t\tCookieHandlerSync.getCookie(REMEMBER_ME_COOKIE_KEY, serverOptions)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\t/**\n\t * @deprecated Use rememberMeCookieAsync.get instead. Sets the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.\n\t *\n\t * @param {boolean} rememberMe - The value in which to set the remember me cookie.\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {void} Void.\n\t */\n\tset: function (rememberMe: boolean, serverOptions?: ServerOptions) {\n\t\tif (rememberMe) {\n\t\t\treturn CookieHandlerSync.setCookie(\n\t\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\t\t\"1\",\n\t\t\t\tserverOptions\n\t\t\t);\n\t\t} else {\n\t\t\tthis.remove();\n\t\t}\n\t},\n\t/**\n\t * @deprecated Use rememberMeCookieAsync.remove instead. Removes the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.\n\t *\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {void} Void.\n\t */\n\tremove: function (serverOptions?: ServerOptions) {\n\t\treturn CookieHandlerSync.deleteCookie(\n\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\tserverOptions\n\t\t);\n\t},\n};\n\n/**\n * @deprecated An object containing helper methods for interacting with the server session.\n */\nexport const serverSession = {\n\t/**\n\t * @deprecated Pass the {@link IncomingMessage} and {@link ServerResponse} to cookie helpers directly instead. Used to retieve the session string, is not compatible with optional cookieHandlingOverride passed in SDK.configure.\n\t *\n\t * @param {IncomingMessage} req - The incoming message created by the server.\n\t * @param {ServerResponse} res - The server response object created by the server.\n\t */\n\tget: function (\n\t\treq: IncomingMessage,\n\t\tres: ServerResponse\n\t): string | undefined {\n\t\treturn CookieHandlerSync.getCookie(\"frontastic-session\", {\n\t\t\treq,\n\t\t\tres,\n\t\t})?.toString();\n\t},\n};\n","export const DEFAULT_SESSION_LIFETIME = 7776000000; // 3 months\n","export const SDK_NOT_CONFIGURED_ERROR_MESSAGE =\n\t\"The SDK has not been configured. Please call .configure on the base SDK before you call any other methods\";\n","import { SDK_NOT_CONFIGURED_ERROR_MESSAGE } from \"../constants\";\nimport { CookieManager } from \"../types/cookieHandling/CookieManager\";\n\nclass DependencyContainer {\n\thasBeenConfigured: boolean;\n\tprivate _cookieHandler!: CookieManager;\n\n\tconstructor() {\n\t\tthis.hasBeenConfigured = false;\n\t}\n\n\tget cookieHandler(): CookieManager {\n\t\treturn this._cookieHandler;\n\t}\n\n\tset cookieHandler(cookierHandler: CookieManager) {\n\t\tthis._cookieHandler = cookierHandler;\n\t}\n\n\tconfigure(cookieHandler: CookieManager) {\n\t\tthis.hasBeenConfigured = true;\n\t\tthis.cookieHandler = cookieHandler;\n\t}\n\n\tthrowIfDINotConfigured = () => {\n\t\tif (!this.hasBeenConfigured) {\n\t\t\tthrow new Error(SDK_NOT_CONFIGURED_ERROR_MESSAGE);\n\t\t}\n\t};\n}\n\nclass Wrapper {\n\tdependencyContainer!: DependencyContainer;\n\n\tconstructor() {\n\t\tthis.dependencyContainer = new DependencyContainer();\n\t}\n\n\tgetDependencyContainer = () => this.dependencyContainer;\n}\n\nconst wrapper = new Wrapper();\nconst dependencyContainer = wrapper.getDependencyContainer;\n\nexport { dependencyContainer };\n","import { ServerOptions } from \"../types/cookieHandling\";\nimport { dependencyContainer } from \"../library/DependencyContainer\";\nimport { REMEMBER_ME_COOKIE_KEY } from \"../constants/rememberMeCookieKey\";\n\n/**\n * An object containing helper methods for interacting with the remember me cookie.\n */\nexport const rememberMeCookieAsync = {\n\t/**\n\t * Gets the remember me cookie.\n\t *\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {Promise<boolean>} A boolean indicating whether or not the user is to be remembered.\n\t */\n\tget: async function (serverOptions?: ServerOptions): Promise<boolean> {\n\t\tdependencyContainer().throwIfDINotConfigured();\n\t\tconst rememberMe = await dependencyContainer().cookieHandler.getCookie(\n\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\tserverOptions\n\t\t);\n\t\treturn !!rememberMe;\n\t},\n\t/**\n\t * Sets the remember me cookie.\n\t *\n\t * @param {boolean} rememberMe - The value in which to set the remember me cookie.\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {Promise<void>} Void.\n\t */\n\tset: async function (\n\t\trememberMe: boolean,\n\t\tserverOptions?: ServerOptions\n\t): Promise<void> {\n\t\tdependencyContainer().throwIfDINotConfigured();\n\t\tif (rememberMe) {\n\t\t\tawait dependencyContainer().cookieHandler.setCookie(\n\t\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\t\t\"1\",\n\t\t\t\tserverOptions\n\t\t\t);\n\t\t} else {\n\t\t\tawait this.remove();\n\t\t}\n\t},\n\t/**\n\t * Removes the remember me cookie.\n\t *\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {Promise<void>} Void.\n\t */\n\tremove: async function (serverOptions?: ServerOptions): Promise<void> {\n\t\tdependencyContainer().throwIfDINotConfigured();\n\t\tawait dependencyContainer().cookieHandler.deleteCookie(\n\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\tserverOptions\n\t\t);\n\t},\n};\n","import { SDK } from \"./SDK\";\nimport { Events } from \"../types/events/Events\";\nimport { Integration } from \"./Integration\";\n/**\n * The abstract base class signature to extend SDK integration classes.\n * @deprecated This class is deprecated and should not be used any more, extend the {@link Integration} class instead\n *\n * @param {Extension<CustomEvents>} CustomEvents - The generic argument defining any custom events on the integration.\n */\nabstract class Extension<CustomEvents extends Events> {\n\t/**\n\t * The sdk instance passed and assigned in the constructor.\n\t */\n\tprotected sdk: SDK<CustomEvents>;\n\n\t/**\n\t * Contructor.\n\t *\n\t * @param {SDK} sdk - The singleton sdk instance created within your project.\n\t */\n\tconstructor(sdk: SDK<CustomEvents>) {\n\t\tthis.sdk = sdk;\n\t}\n}\n\nexport { Extension };\n","import { SDK } from \"./SDK\";\nimport { Events } from \"../types/events/Events\";\n\n/**\n * The abstract base class signature to extend SDK integration classes.\n * \n * @param {Integration<CustomEvents>} CustomEvents - The generic argument defining any custom events on the integration.\n */\nabstract class Integration<CustomEvents extends Events> {\n\t/**\n\t * The sdk instance passed and assigned in the constructor.\n\t */\n\tprotected sdk: SDK<CustomEvents>;\n\n\t/**\n\t * Contructor.\n\t *\n\t * @param {SDK} sdk - The singleton sdk instance created within your project.\n\t */\n\tconstructor(sdk: SDK<CustomEvents>) {\n\t\tthis.sdk = sdk;\n\t}\n}\n\nexport { Integration };\n","/**\n * An error created when the internal fetcher fails.\n */\nexport class FetchError extends Error {\n\t[key: string]: any;\n\t/**\n\t * The message associated with the error.\n\t */\n\tmessage!: string;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param {string | Error} error - The error message or object detected.\n\t */\n\tconstructor(error: string | Error) {\n\t\tsuper();\n\n\t\tif (typeof error === \"string\") {\n\t\t\tthis.message = error;\n\t\t} else {\n\t\t\tObject.keys(error).forEach((key) => {\n\t\t\t\tthis[key] = error[key as keyof typeof error];\n\t\t\t});\n\t\t}\n\t}\n}\n","import { DEFAULT_SESSION_LIFETIME } from \"../constants/defaultSessionLifetime\";\nimport { ServerOptions } from \"../types/cookieHandling\";\nimport { rememberMeCookieAsync } from \"./cookieManagement\";\nimport { FetchError } from \"../library/FetchError\";\nimport { dependencyContainer } from \"../library/DependencyContainer\";\n\nexport const fetcher = async <T>(\n\turl: string,\n\toptions: RequestInit,\n\tserverOptions?: ServerOptions,\n\tsessionLifetime?: number\n): Promise<T | FetchError> => {\n\tdependencyContainer().throwIfDINotConfigured();\n\tlet sessionCookie = (await dependencyContainer().cookieHandler.getCookie(\n\t\t\"frontastic-session\",\n\t\tserverOptions\n\t)) as string;\n\tsessionCookie = sessionCookie ?? \"\";\n\tconst incomingHeaders: { [key: string]: any } = serverOptions?.req\n\t\t? { ...serverOptions.req.headers }\n\t\t: {};\n\tdelete incomingHeaders[\"host\"];\n\tdelete incomingHeaders[\"cookie\"];\n\n\toptions.headers = {\n\t\t\"Content-Type\": \"application/json\",\n\t\tAccept: \"application/json\",\n\t\t\"X-Frontastic-Access-Token\": \"APIKEY\",\n\t\t...(options.headers || {}),\n\t\t...(sessionCookie ? { \"Frontastic-Session\": sessionCookie } : {}),\n\t\t...incomingHeaders,\n\t};\n\n\tconst response: Response = await fetch(url, options);\n\n\tif (response.ok && response.headers.has(\"Frontastic-Session\")) {\n\t\tlet rememberMe = await rememberMeCookieAsync.get();\n\t\tlet expiryDate;\n\n\t\tif (rememberMe) {\n\t\t\texpiryDate = new Date(\n\t\t\t\tDate.now() + (sessionLifetime ?? DEFAULT_SESSION_LIFETIME)\n\t\t\t);\n\t\t}\n\t\tawait dependencyContainer().cookieHandler.setCookie(\n\t\t\t\"frontastic-session\",\n\t\t\tresponse.headers.get(\"Frontastic-Session\")!,\n\t\t\t{ expires: expiryDate, ...(serverOptions ?? {}) }\n\t\t);\n\t}\n\n\tif (response.ok) {\n\t\treturn response.json();\n\t}\n\n\tlet error: Error | string;\n\n\ttry {\n\t\terror = await response.clone().json();\n\t} catch (e) {\n\t\terror = await response.text();\n\t}\n\n\treturn new FetchError(error);\n};\n","type QueueItem<T> = {\n\tpromise: () => Promise<unknown>;\n\tresolve: (value: T) => void;\n\treject: (reason?: any) => void;\n};\n\nexport class Queue {\n\t#queue: QueueItem<any>[] = [];\n\t#promisePending = false;\n\t#stopped = false;\n\n\tadd<T>(promise: () => Promise<T>): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.#queue.push({\n\t\t\t\tpromise,\n\t\t\t\tresolve,\n\t\t\t\treject,\n\t\t\t});\n\t\t\tthis.#handle();\n\t\t});\n\t}\n\n\tstop() {\n\t\tthis.#stopped = true;\n\t}\n\n\trestart() {\n\t\tthis.#stopped = false;\n\t\tthis.#handle();\n\t}\n\n\t#handle(): void {\n\t\tif (this.#promisePending || this.#stopped) {\n\t\t\treturn;\n\t\t}\n\t\tconst item = this.#queue.shift();\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis.#promisePending = true;\n\t\t\t// TODO: check anonamous functions don't mess up stack trace too much\n\t\t\titem.promise()\n\t\t\t\t.then((value) => this.#resolve(() => item.resolve(value)))\n\t\t\t\t.catch((err) => this.#resolve(() => item.reject(err)));\n\t\t} catch (err) {\n\t\t\tthis.#resolve(() => item.reject(err));\n\t\t}\n\t}\n\n\t#resolve(callback: () => void): void {\n\t\tthis.#promisePending = false;\n\t\tcallback();\n\t\tthis.#handle();\n\t}\n}\n","/**\n * The class represeting the Event type to be passed to the EventManager's trigger function.\n *\n * @param {EventName} EventName - The name of the event being created, will match the key of the specific event.\n * @param {EventData} EventData - The data associated with the event being created, will match the value of the specific event and be the parameter supplied to the event handler.\n */\nexport class Event<\n\tEventName extends string = string,\n\tEventData extends any = void\n> {\n\t/**\n\t * The name of the event, will match the key of the specific event.\n\t */\n\tpublic eventName: EventName;\n\t/**\n\t * The data associated with the event, will match the value of the specific event and be the parameter supplied to the event handler.\n\t */\n\tpublic data: EventData;\n\tpublic isDefaultPrevented: boolean;\n\tpublic isCancelled: boolean;\n\tpublic isPropagationStopped: boolean;\n\n\t/**\n\t * Contructor.\n\t *\n\t * @param {EventName} options.eventName - The name of the event being created, will match the key of the specific event.\n\t * @param {EventData} options.data - The data associated with the event being created, will match the value of the specific event and be the parameter supplied to the event handler.\n\t */\n\tconstructor(options: { eventName: EventName; data: EventData }) {\n\t\tthis.eventName = options.eventName;\n\t\tthis.data = options.data;\n\n\t\tthis.isCancelled = false;\n\t\tthis.isDefaultPrevented = false;\n\t\tthis.isPropagationStopped = false;\n\t}\n\n\tpublic preventDefault(): void {\n\t\tthis.isDefaultPrevented = true;\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.isCancelled = true;\n\t}\n\n\tpublic stopPropagation(): void {\n\t\tthis.isPropagationStopped = true;\n\t}\n}\n","import { Event } from \"./Event\";\n\nexport class EventManager<Events> {\n\tprotected eventHandlers: Record<\n\t\tstring,\n\t\tArray<(event: Event<keyof Events, Events[keyof Events]>) => void>\n\t>;\n\n\tconstructor() {\n\t\tthis.eventHandlers = {};\n\t}\n\n\tprotected getEventHandlers<EventName extends keyof Events>(\n\t\teventName: EventName\n\t): Array<(event: Event<EventName, Events[EventName]>) => void> {\n\t\tlet eventHandlers = this.eventHandlers[eventName];\n\n\t\tif (eventHandlers === undefined) {\n\t\t\teventHandlers = [];\n\t\t\tthis.eventHandlers[eventName] = eventHandlers;\n\t\t}\n\n\t\treturn eventHandlers;\n\t}\n\n\t/**\n\t * Adds an event handler for a pre-defined event.\n\t *\n\t * @param {EventName} eventName - The name of the event, will match the key of the specific event.\n\t * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function to be called when the event is triggered.\n\t */\n\tpublic on<EventName extends keyof Events>(\n\t\teventName: EventName,\n\t\thandler: (event: Event<EventName, Events[EventName]>) => void\n\t): void {\n\t\tlet eventHandlers = this.getEventHandlers(eventName);\n\t\teventHandlers.push(handler);\n\t}\n\n\t/**\n\t * Removes an event handler for a pre-defined event.\n\t *\n\t * @param {EventName} eventName - The name of the event, will match the key of the specific event.\n\t * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function instance to be removed.\n\t */\n\tpublic off<EventName extends keyof Events>(\n\t\teventName: EventName,\n\t\thandler: (event: Event<EventName, Events[EventName]>) => void\n\t) {\n\t\tlet eventHandlers = this.getEventHandlers(eventName);\n\t\teventHandlers.splice(eventHandlers.indexOf(handler), 1);\n\t}\n\n\t/**\n\t * Triggers a pre-defined event.\n\t *\n\t * @param {Event<EventName, Events[EventName]>} event - The event to be triggered.\n\t */\n\tpublic trigger<EventName extends keyof Events>(\n\t\tevent: Event<EventName, Events[EventName]>\n\t): void {\n\t\tfor (let handler of this.getEventHandlers(event.eventName)) {\n\t\t\thandler(event);\n\t\t}\n\t}\n}\n","import { FetchError } from \"./FetchError\";\n\n/**\n * An error created when the action API fails, extends the {@link FetchError}.\n */\nexport class ActionError extends FetchError {\n\t/**\n\t * The name of the failed action.\n\t */\n\tactionName: string;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param {string} actionName - The name of the failed action.\n\t * @param {FetchError} error - The error returned from the internal fetcher.\n\t */\n\tconstructor(actionName: string, error: FetchError) {\n\t\tsuper(error);\n\n\t\tthis.actionName = actionName;\n\t}\n}\n","import { FetchError } from \"./FetchError\";\n\n/**\n * An error created when a method in the page API fails, extends the {@link FetchError}.\n */\nexport class PageError extends FetchError {\n\t/**\n\t * The path requested during the failed page API call.\n\t */\n\tpath: string;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param {string} path - The path requested during the failed page API call.\n\t * @param {FetchError} error - The error returned from the internal fetcher.\n\t */\n\tconstructor(path: string, error: FetchError) {\n\t\tsuper(error);\n\n\t\tthis.path = path;\n\t}\n}\n","import { AcceptedQueryTypes } from \"../types/Query\";\n\nexport const generateQueryString = function (\n\tquery: AcceptedQueryTypes\n): string {\n\tconst params = new URLSearchParams();\n\tObject.keys(query).forEach((key) => {\n\t\tif (query[key] !== undefined) {\n\t\t\tparams.set(key, query[key].toString());\n\t\t}\n\t});\n\treturn `?${params.toString()}`;\n};\n","import { serialize, parse } from \"cookie\";\nimport {\n\tServerOptions,\n\tTmpCookiesObj,\n\tCookieValueTypes,\n} from \"../types/cookieHandling\";\nimport { CookieManager } from \"../types/cookieHandling/CookieManager\";\n\nexport class CookieHandler implements CookieManager {\n\tisClientSide(): boolean {\n\t\treturn typeof window !== \"undefined\";\n\t}\n\n\tstringify(value: string = \"\"): string {\n\t\ttry {\n\t\t\tconst result = JSON.stringify(value);\n\t\t\treturn /^[\\{\\[]/.test(result) ? result : value;\n\t\t} catch (e) {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tdecode(str: string): string {\n\t\treturn str ? str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent) : str;\n\t}\n\n\tprocessValue(value: string): CookieValueTypes {\n\t\tswitch (value) {\n\t\t\tcase \"true\":\n\t\t\t\treturn true;\n\t\t\tcase \"false\":\n\t\t\t\treturn false;\n\t\t\tcase \"undefined\":\n\t\t\t\treturn undefined;\n\t\t\tcase \"null\":\n\t\t\t\treturn null;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n\n\tasync getCookies(options?: ServerOptions): Promise<TmpCookiesObj> {\n\t\tlet req;\n\t\tif (options) {\n\t\t\treq = options.req;\n\t\t}\n\t\tif (!this.isClientSide()) {\n\t\t\t// if cookie-parser is used in project, get cookies from ctx.req.cookies\n\t\t\t// if cookie-parser isn't used in project, get cookies from ctx.req.headers.cookie\n\t\t\tif (req?.cookies) {\n\t\t\t\treturn req.cookies;\n\t\t\t}\n\t\t\tif (req?.headers?.cookie) {\n\t\t\t\treturn parse(req.headers.cookie);\n\t\t\t}\n\t\t\treturn {};\n\t\t}\n\n\t\tconst _cookies: TmpCookiesObj = {};\n\t\tconst documentCookies = document.cookie\n\t\t\t? document.cookie.split(\"; \")\n\t\t\t: [];\n\n\t\tfor (let i = 0, len = documentCookies.length; i < len; i++) {\n\t\t\tconst cookieParts = documentCookies[i].split(\"=\");\n\n\t\t\tconst _cookie = cookieParts.slice(1).join(\"=\");\n\t\t\tconst name = cookieParts[0];\n\n\t\t\t_cookies[name] = _cookie;\n\t\t}\n\n\t\treturn _cookies;\n\t}\n\n\tasync hasCookie(key: string, options?: ServerOptions): Promise<boolean> {\n\t\tif (!key) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst cookie = await this.getCookies(options);\n\t\treturn cookie.hasOwnProperty(key);\n\t}\n\n\tasync setCookie(\n\t\tkey: string,\n\t\tdata: any,\n\t\toptions?: ServerOptions\n\t): Promise<void> {\n\t\tlet _cookieOptions: any;\n\t\tlet _req;\n\t\tlet _res;\n\t\tif (options) {\n\t\t\tconst { req, res, ..._options } = options;\n\t\t\t_req = req;\n\t\t\t_res = res;\n\t\t\t_cookieOptions = _options;\n\t\t}\n\n\t\tconst cookieStr = serialize(key, this.stringify(data), {\n\t\t\tpath: \"/\",\n\t\t\t..._cookieOptions,\n\t\t});\n\t\tif (!this.isClientSide()) {\n\t\t\tif (_res && _req) {\n\t\t\t\tlet currentCookies = _res.getHeader(\"Set-Cookie\");\n\n\t\t\t\tif (!Array.isArray(currentCookies)) {\n\t\t\t\t\tcurrentCookies = !currentCookies\n\t\t\t\t\t\t? []\n\t\t\t\t\t\t: [String(currentCookies)];\n\t\t\t\t}\n\t\t\t\t_res.setHeader(\"Set-Cookie\", currentCookies.concat(cookieStr));\n\n\t\t\t\tif (_req && _req.cookies) {\n\t\t\t\t\tconst _cookies = _req.cookies;\n\t\t\t\t\tdata === \"\"\n\t\t\t\t\t\t? delete _cookies[key]\n\t\t\t\t\t\t: (_cookies[key] = this.stringify(data));\n\t\t\t\t}\n\n\t\t\t\tif (_req && _req.headers && _req.headers.cookie) {\n\t\t\t\t\tconst _cookies = parse(_req.headers.cookie);\n\n\t\t\t\t\tdata === \"\"\n\t\t\t\t\t\t? delete _cookies[key]\n\t\t\t\t\t\t: (_cookies[key] = this.stringify(data));\n\n\t\t\t\t\t_req.headers.cookie = Object.entries(_cookies).reduce(\n\t\t\t\t\t\t(accum, item) => {\n\t\t\t\t\t\t\treturn accum.concat(`${item[0]}=${item[1]};`);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.cookie = cookieStr;\n\t\t}\n\t}\n\n\tasync getCookie(\n\t\tkey: string,\n\t\toptions?: ServerOptions\n\t): Promise<CookieValueTypes> {\n\t\tconst _cookies = await this.getCookies(options);\n\t\tconst value = _cookies[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.processValue(this.decode(value));\n\t}\n\n\tasync deleteCookie(key: string, options?: ServerOptions): Promise<void> {\n\t\tthis.setCookie(key, \"\", { ...options, maxAge: -1 });\n\t}\n}\n","import { fetcher } from \"../helpers/fetcher\";\nimport { Queue } from \"./Queue\";\nimport { Event } from \"./Event\";\nimport { EventManager } from \"./EventManager\";\nimport { StandardEvents } from \"../types/events/StandardEvents\";\nimport { Events } from \"../types/events/Events\";\nimport { Currency } from \"../types/Currency\";\nimport { SDKResponse } from \"../types/SDKResponse\";\nimport { FetchError } from \"./FetchError\";\nimport { ActionError } from \"./ActionError\";\nimport { PageError } from \"./PageError\";\nimport {\n\tPageApi,\n\tPageFolderListResponse,\n\tPagePreviewResponse,\n\tPageResponse,\n} from \"../types/api/page\";\nimport { generateQueryString } from \"../helpers/queryStringHelpers\";\nimport { AcceptedQueryTypes } from \"../types/Query\";\nimport { ServerOptions } from \"../types/cookieHandling/ServerOptions\";\nimport {\n\tDEFAULT_SESSION_LIFETIME,\n\tSDK_NOT_CONFIGURED_ERROR_MESSAGE,\n} from \"../constants\";\nimport { CookieManager } from \"../types/cookieHandling/CookieManager\";\nimport { dependencyContainer } from \"./DependencyContainer\";\nimport { CookieHandler } from \"./CookieHandler\";\n\ntype SDKConfig = {\n\tlocale: string;\n\tcurrency: Currency;\n\tendpoint: string;\n\tuseCurrencyInLocale?: boolean;\n\textensionVersion?: string;\n\tsessionLifetime?: number;\n\tcookieHandlingOverride?: CookieManager;\n};\n\nexport class SDK<ExtensionEvents extends Events> extends EventManager<\n\tStandardEvents & ExtensionEvents\n> {\n\t#hasBeenConfigured;\n\n\t#endpoint!: string;\n\t#locale!: Intl.Locale;\n\t#currency!: Currency;\n\t#useCurrencyInLocale!: boolean;\n\t#extensionVersion!: string;\n\t#actionQueue: Queue;\n\t#sessionLifetime!: number;\n\n\tset endpoint(url: string) {\n\t\turl = this.#normaliseUrl(url);\n\t\tif (url.indexOf(\"http\") === -1) {\n\t\t\turl = `https://${url}`;\n\t\t\t// Note the below doesn't support websocket connections but much more work would\n\t\t\t// be rquired for this anyway\n\t\t\tconsole.warn(\n\t\t\t\t`Protocol not supplied to endpoint, defaulting to https - ${url}`\n\t\t\t);\n\t\t}\n\t\t// remove \"/frontastic\" if applied\n\t\tthis.#endpoint = url.split(\"/frontastic\")[0];\n\t}\n\n\t/**\n\t * The full url endpoint to be called, to be set within the {@link configure} method.\n\t */\n\tget endpoint() {\n\t\treturn this.#endpoint;\n\t}\n\n\tset locale(locale: string) {\n\t\tthis.#locale = new Intl.Locale(locale);\n\t}\n\n\t/**\n\t * The string representing the combination of the ISO 639-1 language and ISO 3166-1 country code, to be set within the {@link configure} method.\n\t */\n\tget locale(): Intl.BCP47LanguageTag {\n\t\treturn this.#locale.baseName;\n\t}\n\n\t/**\n\t * @deprecated The string representing the locale in the posix format to be used internally.\n\t */\n\tget posixLocale(): string {\n\t\tconst apiFormattedLocale = this.locale.slice(0, 5).replace(\"-\", \"_\");\n\n\t\tif (this.#useCurrencyInLocale) {\n\t\t\treturn `${apiFormattedLocale}@${this.currency}`;\n\t\t} else {\n\t\t\treturn apiFormattedLocale;\n\t\t}\n\t}\n\n\t/**\n\t * The string representing the locale formatted to be used when communicating with the backend.\n\t */\n\tprivate get apiHubLocale(): string {\n\t\tconst apiFormattedLocale = this.locale.replace(\"-\", \"_\");\n\n\t\tif (this.#useCurrencyInLocale) {\n\t\t\treturn `${apiFormattedLocale}@${this.currency}`;\n\t\t} else {\n\t\t\treturn apiFormattedLocale;\n\t\t}\n\t}\n\n\tset currency(currency: Currency) {\n\t\tthis.#currency = currency;\n\t}\n\n\t/**\n\t * The string representing the ISO 3-Letter Currency Code, to be set within the {@link configure} method.\n\t */\n\tget currency() {\n\t\treturn this.#currency;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.#hasBeenConfigured = false;\n\t\tthis.#actionQueue = new Queue();\n\t}\n\n\t#throwIfNotConfigured() {\n\t\tif (!this.#hasBeenConfigured) {\n\t\t\tthrow new Error(SDK_NOT_CONFIGURED_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\t#normaliseUrl = (url: string): string =>\n\t\turl.split(\"//\").reduce((previous, current) => {\n\t\t\tif (current === \"http:\" || current === \"https:\") {\n\t\t\t\treturn (current += \"/\");\n\t\t\t}\n\t\t\treturn `${previous}/${current}`;\n\t\t}, \"\");\n\n\t/**\n\t * The method that must be called prior to any other methods to configure the connection to the backend. An error is throw if not called prior.\n\t *\n\t * @param {string} config.locale - A string representing the combination of the ISO 639-1 language and ISO 3166-1 country code. For example \"en-DE\" or \"en_DE\".\n\t * @param {string} config.currency - A string representing the ISO 3-Letter Currency Code, for example EUR.\n\t * @param {string} config.endpoint - A string representing the full URL of the endpoint to be called.\n\t * @param {boolean} [config.useCurrencyInLocale=false] - An optional boolean, default false. To be set to true if currency is required in config.locale, for example en-GB@EUR.\n\t * @param {string} [config.extensionVersion=\"\"] - An optional string required for multitenancy projects, stored in the environment variable process.env.NEXT_PUBLIC_EXT_BUILD_ID to specify the extension version in which to connect.\n\t * @param {string} [config.sessionLifetime=7776000000] - An optional number of milliseconds in which to persist the session lifeTime, to override the {@link DEFAULT_SESSION_LIFETIME} of 3 months.\n\t * @param {CookieManager} [config.cookieHandlingOverride] - An optional cookie manager interface that contains all the cookie handling methods.\n\t *\n\t * @returns {void} Void.\n\t */\n\tconfigure(config: SDKConfig) {\n\t\tdependencyContainer().configure(\n\t\t\tconfig.cookieHandlingOverride ?? new CookieHandler()\n\t\t);\n\t\tthis.endpoint = config.endpoint;\n\t\tthis.configureLocale(config);\n\t\tthis.#useCurrencyInLocale = config.useCurrencyInLocale ?? false;\n\t\tthis.#extensionVersion = config.extensionVersion ?? \"\";\n\t\tthis.#sessionLifetime =\n\t\t\tconfig.sessionLifetime ?? DEFAULT_SESSION_LIFETIME;\n\n\t\tthis.#hasBeenConfigured = true;\n\t}\n\n\t/**\n\t * The method called to standardise the locale and currency inputs.\n\t *\n\t * @param {string} config.locale - A string representing the combination of the ISO 639-1 language and ISO 3166-1 country code. For example en-GB or en_GB.\n\t * @param {string} config.currency - A string representing the ISO 3-Letter Currency Code, for example EUR.\n\t *\n\t * @returns {void} Void.\n\t */\n\tconfigureLocale(config: Pick<SDKConfig, \"locale\" | \"currency\">) {\n\t\t// currency present in locale (posix modifier)\n\t\tconst [locale, currency] = config.locale.split(\"@\");\n\t\tif (currency) {\n\t\t\tthis.currency = currency as Currency;\n\t\t}\n\t\t// explicitly defined currency overrides that\n\t\tif (config.currency) {\n\t\t\tthis.currency = config.currency as Currency;\n\t\t}\n\n\t\tthis.locale = locale.replace(/_/g, \"-\");\n\n\t\t// set language, country\n\t\t// const [language, country] = locale.split(\"-\")\n\t\t// this.country = country;\n\t\t// this.language = language;\n\t}\n\n\t#triggerError(error: ActionError | PageError) {\n\t\tthis.trigger(\n\t\t\t// @ts-ignore\n\t\t\tnew Event({\n\t\t\t\teventName: \"errorCaught\",\n\t\t\t\tdata: {\n\t\t\t\t\terror: error,\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n\n\t#handleError(\n\t\toptions:\n\t\t\t| {\n\t\t\t\t\ttype: \"ActionError\";\n\t\t\t\t\terror: string | Error;\n\t\t\t\t\tactionName: string;\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\ttype: \"PageError\";\n\t\t\t\t\terror: string | Error;\n\t\t\t\t\tpath: string;\n\t\t\t  }\n\t): {\n\t\tisError: true;\n\t\terror: FetchError;\n\t} {\n\t\tlet error: FetchError;\n\t\tif (options.error instanceof FetchError) {\n\t\t\terror = options.error;\n\t\t} else {\n\t\t\terror = new FetchError(<string | Error>options.error);\n\t\t}\n\t\tthis.#triggerError(\n\t\t\toptions.type === \"ActionError\"\n\t\t\t\t? new ActionError(options.actionName, error)\n\t\t\t\t: new PageError(options.path, error)\n\t\t);\n\t\treturn { isError: true, error: error };\n\t}\n\n\t#getDefaultAPIHeaders() {\n\t\treturn {\n\t\t\t\"Frontastic-Locale\": this.apiHubLocale,\n\t\t\t\"Frontastic-Currency\": this.currency,\n\t\t\t...(this.#extensionVersion\n\t\t\t\t? {\n\t\t\t\t\t\t\"Commercetools-Frontend-Extension-Version\":\n\t\t\t\t\t\t\tthis.#extensionVersion,\n\t\t\t\t  }\n\t\t\t\t: {}),\n\t\t};\n\t}\n\n\t/**\n\t * The method used to call extension actions.\n\t *\n\t * @param {string} options.actionName - The name of the action corresponding to the location of the extension, for example \"product/getProduct\".\n\t * @param {unknown} [options.payload] - An optional key, value pair object payload to be serialised into the body of the request.\n\t * @param {Object.<string, number, boolean, string[], number[], boolean[]>} [options.query] - An optional key, value pair object to be serialised into the url query.\n\t * @param {Object} [options.serverOptions] - An optional object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {PromiseLike<Object>} An object with a boolean isError property, and either an error or data property for true and false respectively. Type of data will match generic argument supplied to method.\n\t */\n\tasync callAction<ReturnData>(options: {\n\t\tactionName: string;\n\t\tpayload?: unknown;\n\t\tquery?: AcceptedQueryTypes;\n\t\tserverOptions?: ServerOptions;\n\t}): Promise<SDKResponse<ReturnData>> {\n\t\tthis.#throwIfNotConfigured();\n\t\toptions.payload = options.payload ?? {};\n\t\tconst params = options.query ? generateQueryString(options.query) : \"\";\n\t\tconst fetcherOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(options.payload),\n\t\t\theaders: this.#getDefaultAPIHeaders(),\n\t\t};\n\n\t\tlet result: FetchError | Awaited<ReturnData>;\n\t\ttry {\n\t\t\tresult = await this.#actionQueue.add<ReturnData | FetchError>(\n\t\t\t\t() => {\n\t\t\t\t\treturn fetcher<ReturnData>(\n\t\t\t\t\t\tthis.#normaliseUrl(\n\t\t\t\t\t\t\t`${this.#endpoint}/frontastic/action/${\n\t\t\t\t\t\t\t\toptions.actionName\n\t\t\t\t\t\t\t}${params}`\n\t\t\t\t\t\t),\n\t\t\t\t\t\tfetcherOptions,\n\t\t\t\t\t\toptions.serverOptions,\n\t\t\t\t\t\tthis.#sessionLifetime\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn this.#handleError({\n\t\t\t\ttype: \"ActionError\",\n\t\t\t\terror: <string | Error>error,\n\t\t\t\tactionName: options.actionName,\n\t\t\t});\n\t\t}\n\t\tif (result instanceof Error) {\n\t\t\treturn this.#handleError({\n\t\t\t\ttype: \"ActionError\",\n\t\t\t\terror: <string | Error>result.toString(),\n\t\t\t\tactionName: options.actionName,\n\t\t\t});\n\t\t}\n\n\t\treturn { isError: false, data: <ReturnData>result };\n\t}\n\n\t/**\n\t * The domain to call page methods on the API hub.\n\t */\n\tpage: PageApi = {\n\t\tgetPage: async (options: {\n\t\t\tpath: string;\n\t\t\tquery?: AcceptedQueryTypes;\n\t\t\tserverOptions?: ServerOptions;\n\t\t}) => {\n\t\t\tthis.#throwIfNotConfigured();\n\t\t\tconst params = options.query\n\t\t\t\t? generateQueryString(options.query)\n\t\t\t\t: \"\";\n\t\t\tconst fetcherOptions = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Frontastic-Path\": options.path,\n\t\t\t\t\t...this.#getDefaultAPIHeaders(),\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tlet result: FetchError | Awaited<PageResponse>;\n\t\t\ttry {\n\t\t\t\tresult = await fetcher<PageResponse>(\n\t\t\t\t\tthis.#normaliseUrl(\n\t\t\t\t\t\t`${this.#endpoint}/frontastic/page${params}`\n\t\t\t\t\t),\n\t\t\t\t\tfetcherOptions,\n\t\t\t\t\toptions.serverOptions,\n\t\t\t\t\tthis.#sessionLifetime\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\treturn this.#handleError({\n\t\t\t\t\ttype: \"PageError\",\n\t\t\t\t\terror: <string | Error>error,\n\t\t\t\t\tpath: options.path,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (result instanceof Error) {\n\t\t\t\treturn this.#handleError({\n\t\t\t\t\ttype: \"PageError\",\n\t\t\t\t\terror: <string | Error>result.toString(),\n\t\t\t\t\tpath: options.path,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn { isError: false, data: <PageResponse>result };\n\t\t},\n\t\tgetPreview: async (options: {\n\t\t\tpreviewId: string;\n\t\t\tserverOptions?: ServerOptions;\n\t\t}) => {\n\t\t\tthis.#throwIfNotConfigured();\n\t\t\tconst fetcherOptions = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: this.#getDefaultAPIHeaders(),\n\t\t\t};\n\t\t\tlet result: FetchError | Awaited<PagePreviewResponse>;\n\t\t\tconst path = `/preview?previewId=${options.previewId}&locale=${this.apiHubLocale}`;\n\n\t\t\ttry {\n\t\t\t\tresult = await fetcher<PagePreviewResponse>(\n\t\t\t\t\tthis.#normaliseUrl(`${this.#endpoint}/frontastic${path}`),\n\t\t\t\t\tfetcherOptions,\n\t\t\t\t\toptions.serverOptions,\n\t\t\t\t\tthis.#sessionLifetime\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\treturn this.#handleError({\n\t\t\t\t\ttype: \"PageError\",\n\t\t\t\t\terror: <string | Error>error,\n\t\t\t\t\tpath: path,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (result instanceof Error) {\n\t\t\t\treturn this.#handleError({\n\t\t\t\t\ttype: \"PageError\",\n\t\t\t\t\terror: <string | Error>result.toString(),\n\t\t\t\t\tpath: path,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn { isError: false, data: <PagePreviewResponse>result };\n\t\t},\n\t\tgetPages: async (\n\t\t\toptions: {\n\t\t\t\tpath?: string;\n\t\t\t\tdepth?: number;\n\t\t\t\ttypes?: \"static\";\n\t\t\t\tserverOptions?: ServerOptions;\n\t\t\t} = {\n\t\t\t\tdepth: 16,\n\t\t\t\ttypes: \"static\",\n\t\t\t}\n\t\t) => {\n\t\t\tthis.#throwIfNotConfigured();\n\t\t\toptions.depth = options.depth ?? 16;\n\t\t\toptions.types = options.types ?? \"static\";\n\t\t\tconst fetcherOptions = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: this.#getDefaultAPIHeaders(),\n\t\t\t};\n\t\t\tlet result: FetchError | Awaited<PageFolderListResponse>;\n\t\t\tconst path = `/structure?locale=${this.apiHubLocale}${\n\t\t\t\toptions.path ? `&path=${options.path}` : \"\"\n\t\t\t}&depth=${options.depth}`;\n\n\t\t\ttry {\n\t\t\t\tresult = await fetcher<PageFolderListResponse>(\n\t\t\t\t\tthis.#normaliseUrl(`${this.#endpoint}/frontastic${path}`),\n\t\t\t\t\tfetcherOptions,\n\t\t\t\t\toptions.serverOptions,\n\t\t\t\t\tthis.#sessionLifetime\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\treturn this.#handleError({\n\t\t\t\t\ttype: \"PageError\",\n\t\t\t\t\terror: <string | Error>error,\n\t\t\t\t\tpath: path,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (result instanceof Error) {\n\t\t\t\treturn this.#handleError({\n\t\t\t\t\ttype: \"PageError\",\n\t\t\t\t\terror: <string | Error>result.toString(),\n\t\t\t\t\tpath: path,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn { isError: false, data: <PageFolderListResponse>result };\n\t\t},\n\t};\n}\n"],"mappings":"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","names":["import_cookie"]}