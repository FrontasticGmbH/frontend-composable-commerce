import {
  CookieHandlerSync
} from "./chunk-KK7IFFW5.mjs";
import {
  REMEMBER_ME_COOKIE_KEY
} from "./chunk-WTDNM5UB.mjs";

// src/helpers/oldCookieManagement.ts
var rememberMeCookie = {
  /**
   * @deprecated Use rememberMeCookieAsync.get instead. Gets the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {boolean} A boolean indicating whether or not the user is to be remembered.
   */
  get: function(serverOptions) {
    if (CookieHandlerSync.getCookie(REMEMBER_ME_COOKIE_KEY, serverOptions)) {
      return true;
    }
    return false;
  },
  /**
   * @deprecated Use rememberMeCookieAsync.get instead. Sets the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {boolean} rememberMe - The value in which to set the remember me cookie.
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {void} Void.
   */
  set: function(rememberMe, serverOptions) {
    if (rememberMe) {
      return CookieHandlerSync.setCookie(
        REMEMBER_ME_COOKIE_KEY,
        "1",
        serverOptions
      );
    } else {
      this.remove();
    }
  },
  /**
   * @deprecated Use rememberMeCookieAsync.remove instead. Removes the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {void} Void.
   */
  remove: function(serverOptions) {
    return CookieHandlerSync.deleteCookie(
      REMEMBER_ME_COOKIE_KEY,
      serverOptions
    );
  }
};
var serverSession = {
  /**
   * @deprecated Pass the {@link IncomingMessage} and {@link ServerResponse} to cookie helpers directly instead. Used to retieve the session string, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {IncomingMessage} req - The incoming message created by the server.
   * @param {ServerResponse} res - The server response object created by the server.
   */
  get: function(req, res) {
    return CookieHandlerSync.getCookie("frontastic-session", {
      req,
      res
    })?.toString();
  }
};

export {
  rememberMeCookie,
  serverSession
};
//# sourceMappingURL=chunk-PYOTIWNW.mjs.map