{"version":3,"sources":["../../../src/types/cookieHandling/CookieManager.ts"],"sourcesContent":["import { CookieValueTypes, ServerOptions, TmpCookiesObj } from \"./\";\n\n/**\n * An interface containing all the cookie management methods.\n */\nexport interface CookieManager {\n\t/**\n\t * Computes and gets the cookies from the server or the client.\n\t *\n\t * @param {ServerOptions} [options] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {TmpCookiesObj} A key, value pair object of type {@link CookieValueTypes} holding cookie values.\n\t */\n\tgetCookies(options?: ServerOptions): Promise<TmpCookiesObj>;\n\n\t/**\n\t * Gets a cookie with the provided key.\n\t *\n\t * @param {string} key - A string representing the key value of the cookie.\n\t * @param {ServerOptions} [options] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {TmpCookiesObj} A key, value pair object of type {@link CookieValueTypes} holding cookie values.\n\t */\n\tgetCookie(key: string, options?: ServerOptions): Promise<CookieValueTypes>;\n\n\t/**\n\t * Sets the cookie from the server or the client.\n\t *\n\t * @param {string} key - A string representing the key in which to set the cookiee.\n\t * @param {ServerOptions} [options] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {void} void.\n\t */\n\tsetCookie(key: string, data: any, options?: ServerOptions): Promise<void>;\n\n\t/**\n\t * Deletes the cookie.\n\t *\n\t * @param {string} key - A string representing the key of the cookie.\n\t * @param {ServerOptions} [options] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {void} void.\n\t */\n\tdeleteCookie(key: string, options?: ServerOptions): Promise<void>;\n\n\t/**\n\t * Checks if the cookie is present.\n\t *\n\t * @param {string} key - A string representing the key of the cookie.\n\t * @param {ServerOptions} [options] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {boolean} A boolean indicating if the cookie is present.\n\t */\n\thasCookie(key: string, options?: ServerOptions): Promise<boolean>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}