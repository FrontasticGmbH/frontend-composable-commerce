{"version":3,"sources":["../../../../src/types/api/page/index.ts"],"sourcesContent":["import { ServerOptions } from \"../../cookieHandling\";\nimport { SDKResponse } from \"../../../types/SDKResponse\";\nimport { AcceptedQueryTypes } from \"../../Query\";\nimport { PageFolderListResponse } from \"./PageFolderListResponse\";\nimport { PagePreviewResponse } from \"./PagePreviewResponse\";\nimport { PageResponse } from \"./PageResponse\";\nimport { PageViewData } from \"./PageViewData\";\n\ntype PageApi = {\n\t/**\n\t * The method to get page data from the API-hub.\n\t *\n\t * @param {string} options.path - A string representing the relative path of the page data to be fetched, for example \"/sale\".\n\t * @param {Object.<string, number, boolean, string[], number[], boolean[]>} [options.query] - An optional key, value pair object to be serialised into the url query.\n\t * @param {Object} [options.serverOptions] - An optional object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively.  Required for server-side rendering session management.\n\t *\n\t * @returns {PromiseLike<PageResponse>} An object with a boolean isError property, and either an error or data property for true and false respectively. Data contains Page, PageFolder and PageView data.\n\t */\n\tgetPage: (options: {\n\t\tpath: string;\n\t\tquery?: AcceptedQueryTypes;\n\t\tserverOptions?: ServerOptions;\n\t}) => Promise<SDKResponse<PageResponse>>;\n\t/**\n\t * The method to get page preview data from the API-hub.\n\t *\n\t * @param {string} options.previewId - A string representing the ID of the preview to be fetched, likely to be acquired from a query in the visited URL.\n\t * @param {Object} [options.serverOptions] - An optional object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively.  Required for server-side rendering session management.\n\t *\n\t * @returns {PromiseLike<PagePreviewResponse>} An object with a boolean isError property, and either an error or data property for true and false respectively. Data contains Page, PageFolder and PageView data.\n\t */\n\tgetPreview: (options: {\n\t\tpreviewId: string;\n\t\tserverOptions?: ServerOptions;\n\t}) => Promise<SDKResponse<PagePreviewResponse>>;\n\t/**\n\t * The method to get a flat folder structure of pages from a relative path.\n\t *\n\t * @param {string} [options.path=\"/\"] - An optional string with a default value of \"\" for home, representing the relative path of the page to start fetching data, for example \"/sale\".\n\t * @param {number} [options.depth=16] - An optional number with a default value of 16, the depth to dig into page folders to fetch.\n\t * @param {string} [options.types=\"static\"] - An optional string with a default value of \"static\". The types of pages to fetch.\n\t * @param {Object} [options.serverOptions] - An optional object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively.  Required for server-side rendering session management.\n\t *\n\t * @returns {PromiseLike<PageFolderListResponse>} An object with a boolean isError property, and either an error or data property for true and false respectively. Data is an array of PageFolder data.\n\t */\n\tgetPages: (options?: {\n\t\tpath?: string;\n\t\tdepth?: number;\n\t\ttypes?: \"static\";\n\t\tserverOptions?: ServerOptions;\n\t}) => Promise<SDKResponse<PageFolderListResponse>>;\n};\n\nexport {\n\tPageApi,\n\tPageResponse,\n\tPagePreviewResponse,\n\tPageViewData,\n\tPageFolderListResponse,\n};\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}