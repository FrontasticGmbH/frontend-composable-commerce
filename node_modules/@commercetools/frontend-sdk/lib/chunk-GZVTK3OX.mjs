import {
  FetchError
} from "./chunk-WPBY2QJD.mjs";
import {
  rememberMeCookieAsync
} from "./chunk-4FACXPFK.mjs";
import {
  dependencyContainer
} from "./chunk-ICYJIS2X.mjs";
import {
  DEFAULT_SESSION_LIFETIME
} from "./chunk-AHWPTJDR.mjs";

// src/helpers/fetcher.ts
var fetcher = async (url, options, serverOptions, sessionLifetime) => {
  dependencyContainer().throwIfDINotConfigured();
  let sessionCookie = await dependencyContainer().cookieHandler.getCookie(
    "frontastic-session",
    serverOptions
  );
  sessionCookie = sessionCookie ?? "";
  const incomingHeaders = serverOptions?.req ? { ...serverOptions.req.headers } : {};
  delete incomingHeaders["host"];
  delete incomingHeaders["cookie"];
  options.headers = {
    "Content-Type": "application/json",
    Accept: "application/json",
    "X-Frontastic-Access-Token": "APIKEY",
    ...options.headers || {},
    ...sessionCookie ? { "Frontastic-Session": sessionCookie } : {},
    ...incomingHeaders
  };
  const response = await fetch(url, options);
  if (response.ok && response.headers.has("Frontastic-Session")) {
    let rememberMe = await rememberMeCookieAsync.get();
    let expiryDate;
    if (rememberMe) {
      expiryDate = new Date(
        Date.now() + (sessionLifetime ?? DEFAULT_SESSION_LIFETIME)
      );
    }
    await dependencyContainer().cookieHandler.setCookie(
      "frontastic-session",
      response.headers.get("Frontastic-Session"),
      { expires: expiryDate, ...serverOptions ?? {} }
    );
  }
  if (response.ok) {
    return response.json();
  }
  let error;
  try {
    error = await response.clone().json();
  } catch (e) {
    error = await response.text();
  }
  return new FetchError(error);
};

export {
  fetcher
};
//# sourceMappingURL=chunk-GZVTK3OX.mjs.map