// src/library/CookieHandler.ts
import { serialize, parse } from "cookie";
var CookieHandler = class {
  isClientSide() {
    return typeof window !== "undefined";
  }
  stringify(value = "") {
    try {
      const result = JSON.stringify(value);
      return /^[\{\[]/.test(result) ? result : value;
    } catch (e) {
      return value;
    }
  }
  decode(str) {
    return str ? str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent) : str;
  }
  processValue(value) {
    switch (value) {
      case "true":
        return true;
      case "false":
        return false;
      case "undefined":
        return void 0;
      case "null":
        return null;
      default:
        return value;
    }
  }
  async getCookies(options) {
    let req;
    if (options) {
      req = options.req;
    }
    if (!this.isClientSide()) {
      if (req?.cookies) {
        return req.cookies;
      }
      if (req?.headers?.cookie) {
        return parse(req.headers.cookie);
      }
      return {};
    }
    const _cookies = {};
    const documentCookies = document.cookie ? document.cookie.split("; ") : [];
    for (let i = 0, len = documentCookies.length; i < len; i++) {
      const cookieParts = documentCookies[i].split("=");
      const _cookie = cookieParts.slice(1).join("=");
      const name = cookieParts[0];
      _cookies[name] = _cookie;
    }
    return _cookies;
  }
  async hasCookie(key, options) {
    if (!key) {
      return false;
    }
    const cookie = await this.getCookies(options);
    return cookie.hasOwnProperty(key);
  }
  async setCookie(key, data, options) {
    let _cookieOptions;
    let _req;
    let _res;
    if (options) {
      const { req, res, ..._options } = options;
      _req = req;
      _res = res;
      _cookieOptions = _options;
    }
    const cookieStr = serialize(key, this.stringify(data), {
      path: "/",
      ..._cookieOptions
    });
    if (!this.isClientSide()) {
      if (_res && _req) {
        let currentCookies = _res.getHeader("Set-Cookie");
        if (!Array.isArray(currentCookies)) {
          currentCookies = !currentCookies ? [] : [String(currentCookies)];
        }
        _res.setHeader("Set-Cookie", currentCookies.concat(cookieStr));
        if (_req && _req.cookies) {
          const _cookies = _req.cookies;
          data === "" ? delete _cookies[key] : _cookies[key] = this.stringify(data);
        }
        if (_req && _req.headers && _req.headers.cookie) {
          const _cookies = parse(_req.headers.cookie);
          data === "" ? delete _cookies[key] : _cookies[key] = this.stringify(data);
          _req.headers.cookie = Object.entries(_cookies).reduce(
            (accum, item) => {
              return accum.concat(`${item[0]}=${item[1]};`);
            },
            ""
          );
        }
      }
    } else {
      document.cookie = cookieStr;
    }
  }
  async getCookie(key, options) {
    const _cookies = await this.getCookies(options);
    const value = _cookies[key];
    if (value === void 0) {
      return void 0;
    }
    return this.processValue(this.decode(value));
  }
  async deleteCookie(key, options) {
    this.setCookie(key, "", { ...options, maxAge: -1 });
  }
};

export {
  CookieHandler
};
//# sourceMappingURL=chunk-SSCUX2OX.mjs.map