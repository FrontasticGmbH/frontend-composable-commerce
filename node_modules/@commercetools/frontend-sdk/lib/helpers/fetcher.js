"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/helpers/fetcher.ts
var fetcher_exports = {};
__export(fetcher_exports, {
  fetcher: () => fetcher
});
module.exports = __toCommonJS(fetcher_exports);

// src/constants/defaultSessionLifetime.ts
var DEFAULT_SESSION_LIFETIME = 7776e6;

// src/constants/rememberMeCookieKey.ts
var REMEMBER_ME_COOKIE_KEY = "__rememberMe";

// src/constants/sdkNotConfiguredErrorMessage.ts
var SDK_NOT_CONFIGURED_ERROR_MESSAGE = "The SDK has not been configured. Please call .configure on the base SDK before you call any other methods";

// src/library/DependencyContainer.ts
var DependencyContainer = class {
  hasBeenConfigured;
  _cookieHandler;
  constructor() {
    this.hasBeenConfigured = false;
  }
  get cookieHandler() {
    return this._cookieHandler;
  }
  set cookieHandler(cookierHandler) {
    this._cookieHandler = cookierHandler;
  }
  configure(cookieHandler) {
    this.hasBeenConfigured = true;
    this.cookieHandler = cookieHandler;
  }
  throwIfDINotConfigured = () => {
    if (!this.hasBeenConfigured) {
      throw new Error(SDK_NOT_CONFIGURED_ERROR_MESSAGE);
    }
  };
};
var Wrapper = class {
  dependencyContainer;
  constructor() {
    this.dependencyContainer = new DependencyContainer();
  }
  getDependencyContainer = () => this.dependencyContainer;
};
var wrapper = new Wrapper();
var dependencyContainer = wrapper.getDependencyContainer;

// src/helpers/cookieManagement.ts
var rememberMeCookieAsync = {
  /**
   * Gets the remember me cookie.
   *
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {Promise<boolean>} A boolean indicating whether or not the user is to be remembered.
   */
  get: async function(serverOptions) {
    dependencyContainer().throwIfDINotConfigured();
    const rememberMe = await dependencyContainer().cookieHandler.getCookie(
      REMEMBER_ME_COOKIE_KEY,
      serverOptions
    );
    return !!rememberMe;
  },
  /**
   * Sets the remember me cookie.
   *
   * @param {boolean} rememberMe - The value in which to set the remember me cookie.
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {Promise<void>} Void.
   */
  set: async function(rememberMe, serverOptions) {
    dependencyContainer().throwIfDINotConfigured();
    if (rememberMe) {
      await dependencyContainer().cookieHandler.setCookie(
        REMEMBER_ME_COOKIE_KEY,
        "1",
        serverOptions
      );
    } else {
      await this.remove();
    }
  },
  /**
   * Removes the remember me cookie.
   *
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {Promise<void>} Void.
   */
  remove: async function(serverOptions) {
    dependencyContainer().throwIfDINotConfigured();
    await dependencyContainer().cookieHandler.deleteCookie(
      REMEMBER_ME_COOKIE_KEY,
      serverOptions
    );
  }
};

// src/library/FetchError.ts
var FetchError = class extends Error {
  /**
   * The message associated with the error.
   */
  message;
  /**
   * Constructor.
   *
   * @param {string | Error} error - The error message or object detected.
   */
  constructor(error) {
    super();
    if (typeof error === "string") {
      this.message = error;
    } else {
      Object.keys(error).forEach((key) => {
        this[key] = error[key];
      });
    }
  }
};

// src/helpers/fetcher.ts
var fetcher = async (url, options, serverOptions, sessionLifetime) => {
  dependencyContainer().throwIfDINotConfigured();
  let sessionCookie = await dependencyContainer().cookieHandler.getCookie(
    "frontastic-session",
    serverOptions
  );
  sessionCookie = sessionCookie ?? "";
  const incomingHeaders = serverOptions?.req ? { ...serverOptions.req.headers } : {};
  delete incomingHeaders["host"];
  delete incomingHeaders["cookie"];
  options.headers = {
    "Content-Type": "application/json",
    Accept: "application/json",
    "X-Frontastic-Access-Token": "APIKEY",
    ...options.headers || {},
    ...sessionCookie ? { "Frontastic-Session": sessionCookie } : {},
    ...incomingHeaders
  };
  const response = await fetch(url, options);
  if (response.ok && response.headers.has("Frontastic-Session")) {
    let rememberMe = await rememberMeCookieAsync.get();
    let expiryDate;
    if (rememberMe) {
      expiryDate = new Date(
        Date.now() + (sessionLifetime ?? DEFAULT_SESSION_LIFETIME)
      );
    }
    await dependencyContainer().cookieHandler.setCookie(
      "frontastic-session",
      response.headers.get("Frontastic-Session"),
      { expires: expiryDate, ...serverOptions ?? {} }
    );
  }
  if (response.ok) {
    return response.json();
  }
  let error;
  try {
    error = await response.clone().json();
  } catch (e) {
    error = await response.text();
  }
  return new FetchError(error);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fetcher
});
//# sourceMappingURL=fetcher.js.map