"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/helpers/oldCookieManagement.ts
var oldCookieManagement_exports = {};
__export(oldCookieManagement_exports, {
  rememberMeCookie: () => rememberMeCookie,
  serverSession: () => serverSession
});
module.exports = __toCommonJS(oldCookieManagement_exports);

// src/library/oldCookieHandler.ts
var import_cookie = require("cookie");
var CookieHandlerSync = class {
  static isClientSide() {
    return typeof window !== "undefined";
  }
  static stringify(value = "") {
    try {
      const result = JSON.stringify(value);
      return /^[\{\[]/.test(result) ? result : value;
    } catch (e) {
      return value;
    }
  }
  static decode(str) {
    return str ? str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent) : str;
  }
  static processValue(value) {
    switch (value) {
      case "true":
        return true;
      case "false":
        return false;
      case "undefined":
        return void 0;
      case "null":
        return null;
      default:
        return value;
    }
  }
  static getCookies(options) {
    let req;
    if (options) {
      req = options.req;
    }
    if (!this.isClientSide()) {
      if (req?.cookies) {
        return req.cookies;
      }
      if (req?.headers?.cookie) {
        return (0, import_cookie.parse)(req.headers.cookie);
      }
      return {};
    }
    const _cookies = {};
    const documentCookies = document.cookie ? document.cookie.split("; ") : [];
    for (let i = 0, len = documentCookies.length; i < len; i++) {
      const cookieParts = documentCookies[i].split("=");
      const _cookie = cookieParts.slice(1).join("=");
      const name = cookieParts[0];
      _cookies[name] = _cookie;
    }
    return _cookies;
  }
  static hasCookie(key, options) {
    if (!key) {
      return false;
    }
    const cookie = this.getCookies(options);
    return cookie.hasOwnProperty(key);
  }
  static setCookie(key, data, options) {
    let _cookieOptions;
    let _req;
    let _res;
    if (options) {
      const { req, res, ..._options } = options;
      _req = req;
      _res = res;
      _cookieOptions = _options;
    }
    const cookieStr = (0, import_cookie.serialize)(key, this.stringify(data), {
      path: "/",
      ..._cookieOptions
    });
    if (!this.isClientSide()) {
      if (_res && _req) {
        let currentCookies = _res.getHeader("Set-Cookie");
        if (!Array.isArray(currentCookies)) {
          currentCookies = !currentCookies ? [] : [String(currentCookies)];
        }
        _res.setHeader("Set-Cookie", currentCookies.concat(cookieStr));
        if (_req && _req.cookies) {
          const _cookies = _req.cookies;
          data === "" ? delete _cookies[key] : _cookies[key] = this.stringify(data);
        }
        if (_req && _req.headers && _req.headers.cookie) {
          const _cookies = (0, import_cookie.parse)(_req.headers.cookie);
          data === "" ? delete _cookies[key] : _cookies[key] = this.stringify(data);
          _req.headers.cookie = Object.entries(_cookies).reduce(
            (accum, item) => {
              return accum.concat(`${item[0]}=${item[1]};`);
            },
            ""
          );
        }
      }
    } else {
      document.cookie = cookieStr;
    }
  }
  static getCookie(key, options) {
    const _cookies = this.getCookies(options);
    const value = _cookies[key];
    if (value === void 0) {
      return void 0;
    }
    return this.processValue(this.decode(value));
  }
  static deleteCookie(key, options) {
    this.setCookie(key, "", { ...options, maxAge: -1 });
  }
};

// src/constants/rememberMeCookieKey.ts
var REMEMBER_ME_COOKIE_KEY = "__rememberMe";

// src/helpers/oldCookieManagement.ts
var rememberMeCookie = {
  /**
   * @deprecated Use rememberMeCookieAsync.get instead. Gets the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {boolean} A boolean indicating whether or not the user is to be remembered.
   */
  get: function(serverOptions) {
    if (CookieHandlerSync.getCookie(REMEMBER_ME_COOKIE_KEY, serverOptions)) {
      return true;
    }
    return false;
  },
  /**
   * @deprecated Use rememberMeCookieAsync.get instead. Sets the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {boolean} rememberMe - The value in which to set the remember me cookie.
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {void} Void.
   */
  set: function(rememberMe, serverOptions) {
    if (rememberMe) {
      return CookieHandlerSync.setCookie(
        REMEMBER_ME_COOKIE_KEY,
        "1",
        serverOptions
      );
    } else {
      this.remove();
    }
  },
  /**
   * @deprecated Use rememberMeCookieAsync.remove instead. Removes the remember me cookie, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
   *
   * @returns {void} Void.
   */
  remove: function(serverOptions) {
    return CookieHandlerSync.deleteCookie(
      REMEMBER_ME_COOKIE_KEY,
      serverOptions
    );
  }
};
var serverSession = {
  /**
   * @deprecated Pass the {@link IncomingMessage} and {@link ServerResponse} to cookie helpers directly instead. Used to retieve the session string, is not compatible with optional cookieHandlingOverride passed in SDK.configure.
   *
   * @param {IncomingMessage} req - The incoming message created by the server.
   * @param {ServerResponse} res - The server response object created by the server.
   */
  get: function(req, res) {
    return CookieHandlerSync.getCookie("frontastic-session", {
      req,
      res
    })?.toString();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rememberMeCookie,
  serverSession
});
//# sourceMappingURL=oldCookieManagement.js.map