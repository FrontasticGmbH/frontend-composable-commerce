{"version":3,"sources":["../../src/helpers/fetcher.ts","../../src/constants/defaultSessionLifetime.ts","../../src/constants/rememberMeCookieKey.ts","../../src/constants/sdkNotConfiguredErrorMessage.ts","../../src/library/DependencyContainer.ts","../../src/helpers/cookieManagement.ts","../../src/library/FetchError.ts"],"sourcesContent":["import { DEFAULT_SESSION_LIFETIME } from \"../constants/defaultSessionLifetime\";\nimport { ServerOptions } from \"../types/cookieHandling\";\nimport { rememberMeCookieAsync } from \"./cookieManagement\";\nimport { FetchError } from \"../library/FetchError\";\nimport { dependencyContainer } from \"../library/DependencyContainer\";\n\nexport const fetcher = async <T>(\n\turl: string,\n\toptions: RequestInit,\n\tserverOptions?: ServerOptions,\n\tsessionLifetime?: number\n): Promise<T | FetchError> => {\n\tdependencyContainer().throwIfDINotConfigured();\n\tlet sessionCookie = (await dependencyContainer().cookieHandler.getCookie(\n\t\t\"frontastic-session\",\n\t\tserverOptions\n\t)) as string;\n\tsessionCookie = sessionCookie ?? \"\";\n\tconst incomingHeaders: { [key: string]: any } = serverOptions?.req\n\t\t? { ...serverOptions.req.headers }\n\t\t: {};\n\tdelete incomingHeaders[\"host\"];\n\tdelete incomingHeaders[\"cookie\"];\n\n\toptions.headers = {\n\t\t\"Content-Type\": \"application/json\",\n\t\tAccept: \"application/json\",\n\t\t\"X-Frontastic-Access-Token\": \"APIKEY\",\n\t\t...(options.headers || {}),\n\t\t...(sessionCookie ? { \"Frontastic-Session\": sessionCookie } : {}),\n\t\t...incomingHeaders,\n\t};\n\n\tconst response: Response = await fetch(url, options);\n\n\tif (response.ok && response.headers.has(\"Frontastic-Session\")) {\n\t\tlet rememberMe = await rememberMeCookieAsync.get();\n\t\tlet expiryDate;\n\n\t\tif (rememberMe) {\n\t\t\texpiryDate = new Date(\n\t\t\t\tDate.now() + (sessionLifetime ?? DEFAULT_SESSION_LIFETIME)\n\t\t\t);\n\t\t}\n\t\tawait dependencyContainer().cookieHandler.setCookie(\n\t\t\t\"frontastic-session\",\n\t\t\tresponse.headers.get(\"Frontastic-Session\")!,\n\t\t\t{ expires: expiryDate, ...(serverOptions ?? {}) }\n\t\t);\n\t}\n\n\tif (response.ok) {\n\t\treturn response.json();\n\t}\n\n\tlet error: Error | string;\n\n\ttry {\n\t\terror = await response.clone().json();\n\t} catch (e) {\n\t\terror = await response.text();\n\t}\n\n\treturn new FetchError(error);\n};\n","export const DEFAULT_SESSION_LIFETIME = 7776000000; // 3 months\n","export const REMEMBER_ME_COOKIE_KEY = \"__rememberMe\";\n","export const SDK_NOT_CONFIGURED_ERROR_MESSAGE =\n\t\"The SDK has not been configured. Please call .configure on the base SDK before you call any other methods\";\n","import { SDK_NOT_CONFIGURED_ERROR_MESSAGE } from \"../constants\";\nimport { CookieManager } from \"../types/cookieHandling/CookieManager\";\n\nclass DependencyContainer {\n\thasBeenConfigured: boolean;\n\tprivate _cookieHandler!: CookieManager;\n\n\tconstructor() {\n\t\tthis.hasBeenConfigured = false;\n\t}\n\n\tget cookieHandler(): CookieManager {\n\t\treturn this._cookieHandler;\n\t}\n\n\tset cookieHandler(cookierHandler: CookieManager) {\n\t\tthis._cookieHandler = cookierHandler;\n\t}\n\n\tconfigure(cookieHandler: CookieManager) {\n\t\tthis.hasBeenConfigured = true;\n\t\tthis.cookieHandler = cookieHandler;\n\t}\n\n\tthrowIfDINotConfigured = () => {\n\t\tif (!this.hasBeenConfigured) {\n\t\t\tthrow new Error(SDK_NOT_CONFIGURED_ERROR_MESSAGE);\n\t\t}\n\t};\n}\n\nclass Wrapper {\n\tdependencyContainer!: DependencyContainer;\n\n\tconstructor() {\n\t\tthis.dependencyContainer = new DependencyContainer();\n\t}\n\n\tgetDependencyContainer = () => this.dependencyContainer;\n}\n\nconst wrapper = new Wrapper();\nconst dependencyContainer = wrapper.getDependencyContainer;\n\nexport { dependencyContainer };\n","import { ServerOptions } from \"../types/cookieHandling\";\nimport { dependencyContainer } from \"../library/DependencyContainer\";\nimport { REMEMBER_ME_COOKIE_KEY } from \"../constants/rememberMeCookieKey\";\n\n/**\n * An object containing helper methods for interacting with the remember me cookie.\n */\nexport const rememberMeCookieAsync = {\n\t/**\n\t * Gets the remember me cookie.\n\t *\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {Promise<boolean>} A boolean indicating whether or not the user is to be remembered.\n\t */\n\tget: async function (serverOptions?: ServerOptions): Promise<boolean> {\n\t\tdependencyContainer().throwIfDINotConfigured();\n\t\tconst rememberMe = await dependencyContainer().cookieHandler.getCookie(\n\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\tserverOptions\n\t\t);\n\t\treturn !!rememberMe;\n\t},\n\t/**\n\t * Sets the remember me cookie.\n\t *\n\t * @param {boolean} rememberMe - The value in which to set the remember me cookie.\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {Promise<void>} Void.\n\t */\n\tset: async function (\n\t\trememberMe: boolean,\n\t\tserverOptions?: ServerOptions\n\t): Promise<void> {\n\t\tdependencyContainer().throwIfDINotConfigured();\n\t\tif (rememberMe) {\n\t\t\tawait dependencyContainer().cookieHandler.setCookie(\n\t\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\t\t\"1\",\n\t\t\t\tserverOptions\n\t\t\t);\n\t\t} else {\n\t\t\tawait this.remove();\n\t\t}\n\t},\n\t/**\n\t * Removes the remember me cookie.\n\t *\n\t * @param {ServerOptions} [serverOptions] - An optional {@link ServerOptions} object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.\n\t *\n\t * @returns {Promise<void>} Void.\n\t */\n\tremove: async function (serverOptions?: ServerOptions): Promise<void> {\n\t\tdependencyContainer().throwIfDINotConfigured();\n\t\tawait dependencyContainer().cookieHandler.deleteCookie(\n\t\t\tREMEMBER_ME_COOKIE_KEY,\n\t\t\tserverOptions\n\t\t);\n\t},\n};\n","/**\n * An error created when the internal fetcher fails.\n */\nexport class FetchError extends Error {\n\t[key: string]: any;\n\t/**\n\t * The message associated with the error.\n\t */\n\tmessage!: string;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param {string | Error} error - The error message or object detected.\n\t */\n\tconstructor(error: string | Error) {\n\t\tsuper();\n\n\t\tif (typeof error === \"string\") {\n\t\t\tthis.message = error;\n\t\t} else {\n\t\t\tObject.keys(error).forEach((key) => {\n\t\t\t\tthis[key] = error[key as keyof typeof error];\n\t\t\t});\n\t\t}\n\t}\n}\n"],"mappings":"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","names":[]}