// src/library/EventManager.ts
var EventManager = class {
  eventHandlers;
  constructor() {
    this.eventHandlers = {};
  }
  getEventHandlers(eventName) {
    let eventHandlers = this.eventHandlers[eventName];
    if (eventHandlers === void 0) {
      eventHandlers = [];
      this.eventHandlers[eventName] = eventHandlers;
    }
    return eventHandlers;
  }
  /**
   * Adds an event handler for a pre-defined event.
   *
   * @param {EventName} eventName - The name of the event, will match the key of the specific event.
   * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function to be called when the event is triggered.
   */
  on(eventName, handler) {
    let eventHandlers = this.getEventHandlers(eventName);
    eventHandlers.push(handler);
  }
  /**
   * Removes an event handler for a pre-defined event.
   *
   * @param {EventName} eventName - The name of the event, will match the key of the specific event.
   * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function instance to be removed.
   */
  off(eventName, handler) {
    let eventHandlers = this.getEventHandlers(eventName);
    eventHandlers.splice(eventHandlers.indexOf(handler), 1);
  }
  /**
   * Triggers a pre-defined event.
   *
   * @param {Event<EventName, Events[EventName]>} event - The event to be triggered.
   */
  trigger(event) {
    for (let handler of this.getEventHandlers(event.eventName)) {
      handler(event);
    }
  }
};

export {
  EventManager
};
//# sourceMappingURL=chunk-EBNJQ4KP.mjs.map