import { EventManager } from './EventManager.js';
import { StandardEvents } from '../types/events/StandardEvents.js';
import { Events } from '../types/events/Events.js';
import { Currency } from '../types/Currency.js';
import { SDKResponse } from '../types/SDKResponse.js';
import { PageApi } from '../types/api/page/index.js';
import { AcceptedQueryTypes } from '../types/Query.js';
import { ServerOptions } from '../types/cookieHandling/ServerOptions.js';
import { CookieManager } from '../types/cookieHandling/CookieManager.js';
import './Event.js';
import './ActionError.js';
import './FetchError.js';
import './PageError.js';
import '../types/api/page/PageFolderListResponse.js';
import '@frontastic/extension-types';
import '../types/api/page/PagePreviewResponse.js';
import '../types/api/page/PageResponse.js';
import '../types/api/page/PageViewData.js';
import 'cookie';
import 'http';
import '../types/cookieHandling/CookieValueTypes.js';
import '../types/cookieHandling/TmpCookiesObj.js';

type SDKConfig = {
    locale: string;
    currency: Currency;
    endpoint: string;
    useCurrencyInLocale?: boolean;
    extensionVersion?: string;
    sessionLifetime?: number;
    cookieHandlingOverride?: CookieManager;
};
declare class SDK<ExtensionEvents extends Events> extends EventManager<StandardEvents & ExtensionEvents> {
    #private;
    set endpoint(url: string);
    /**
     * The full url endpoint to be called, to be set within the {@link configure} method.
     */
    get endpoint(): string;
    set locale(locale: string);
    /**
     * The string representing the combination of the ISO 639-1 language and ISO 3166-1 country code, to be set within the {@link configure} method.
     */
    get locale(): Intl.BCP47LanguageTag;
    /**
     * @deprecated The string representing the locale in the posix format to be used internally.
     */
    get posixLocale(): string;
    /**
     * The string representing the locale formatted to be used when communicating with the backend.
     */
    private get apiHubLocale();
    set currency(currency: Currency);
    /**
     * The string representing the ISO 3-Letter Currency Code, to be set within the {@link configure} method.
     */
    get currency(): Currency;
    constructor();
    /**
     * The method that must be called prior to any other methods to configure the connection to the backend. An error is throw if not called prior.
     *
     * @param {string} config.locale - A string representing the combination of the ISO 639-1 language and ISO 3166-1 country code. For example "en-DE" or "en_DE".
     * @param {string} config.currency - A string representing the ISO 3-Letter Currency Code, for example EUR.
     * @param {string} config.endpoint - A string representing the full URL of the endpoint to be called.
     * @param {boolean} [config.useCurrencyInLocale=false] - An optional boolean, default false. To be set to true if currency is required in config.locale, for example en-GB@EUR.
     * @param {string} [config.extensionVersion=""] - An optional string required for multitenancy projects, stored in the environment variable process.env.NEXT_PUBLIC_EXT_BUILD_ID to specify the extension version in which to connect.
     * @param {string} [config.sessionLifetime=7776000000] - An optional number of milliseconds in which to persist the session lifeTime, to override the {@link DEFAULT_SESSION_LIFETIME} of 3 months.
     * @param {CookieManager} [config.cookieHandlingOverride] - An optional cookie manager interface that contains all the cookie handling methods.
     *
     * @returns {void} Void.
     */
    configure(config: SDKConfig): void;
    /**
     * The method called to standardise the locale and currency inputs.
     *
     * @param {string} config.locale - A string representing the combination of the ISO 639-1 language and ISO 3166-1 country code. For example en-GB or en_GB.
     * @param {string} config.currency - A string representing the ISO 3-Letter Currency Code, for example EUR.
     *
     * @returns {void} Void.
     */
    configureLocale(config: Pick<SDKConfig, "locale" | "currency">): void;
    /**
     * The method used to call extension actions.
     *
     * @param {string} options.actionName - The name of the action corresponding to the location of the extension, for example "product/getProduct".
     * @param {unknown} [options.payload] - An optional key, value pair object payload to be serialised into the body of the request.
     * @param {Object.<string, number, boolean, string[], number[], boolean[]>} [options.query] - An optional key, value pair object to be serialised into the url query.
     * @param {Object} [options.serverOptions] - An optional object containing the res and req objects for ServerResponse and IncomingMessage with cookies respectively. Required for server-side rendering session management.
     *
     * @returns {PromiseLike<Object>} An object with a boolean isError property, and either an error or data property for true and false respectively. Type of data will match generic argument supplied to method.
     */
    callAction<ReturnData>(options: {
        actionName: string;
        payload?: unknown;
        query?: AcceptedQueryTypes;
        serverOptions?: ServerOptions;
    }): Promise<SDKResponse<ReturnData>>;
    /**
     * The domain to call page methods on the API hub.
     */
    page: PageApi;
}

export { SDK };
