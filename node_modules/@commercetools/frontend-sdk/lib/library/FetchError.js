"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/library/FetchError.ts
var FetchError_exports = {};
__export(FetchError_exports, {
  FetchError: () => FetchError
});
module.exports = __toCommonJS(FetchError_exports);
var FetchError = class extends Error {
  /**
   * The message associated with the error.
   */
  message;
  /**
   * Constructor.
   *
   * @param {string | Error} error - The error message or object detected.
   */
  constructor(error) {
    super();
    if (typeof error === "string") {
      this.message = error;
    } else {
      Object.keys(error).forEach((key) => {
        this[key] = error[key];
      });
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FetchError
});
//# sourceMappingURL=FetchError.js.map