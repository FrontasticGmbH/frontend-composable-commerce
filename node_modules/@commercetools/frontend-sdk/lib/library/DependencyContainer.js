"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/library/DependencyContainer.ts
var DependencyContainer_exports = {};
__export(DependencyContainer_exports, {
  dependencyContainer: () => dependencyContainer
});
module.exports = __toCommonJS(DependencyContainer_exports);

// src/constants/sdkNotConfiguredErrorMessage.ts
var SDK_NOT_CONFIGURED_ERROR_MESSAGE = "The SDK has not been configured. Please call .configure on the base SDK before you call any other methods";

// src/library/DependencyContainer.ts
var DependencyContainer = class {
  hasBeenConfigured;
  _cookieHandler;
  constructor() {
    this.hasBeenConfigured = false;
  }
  get cookieHandler() {
    return this._cookieHandler;
  }
  set cookieHandler(cookierHandler) {
    this._cookieHandler = cookierHandler;
  }
  configure(cookieHandler) {
    this.hasBeenConfigured = true;
    this.cookieHandler = cookieHandler;
  }
  throwIfDINotConfigured = () => {
    if (!this.hasBeenConfigured) {
      throw new Error(SDK_NOT_CONFIGURED_ERROR_MESSAGE);
    }
  };
};
var Wrapper = class {
  dependencyContainer;
  constructor() {
    this.dependencyContainer = new DependencyContainer();
  }
  getDependencyContainer = () => this.dependencyContainer;
};
var wrapper = new Wrapper();
var dependencyContainer = wrapper.getDependencyContainer;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  dependencyContainer
});
//# sourceMappingURL=DependencyContainer.js.map