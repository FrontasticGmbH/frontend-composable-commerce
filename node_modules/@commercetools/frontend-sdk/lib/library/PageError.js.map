{"version":3,"sources":["../../src/library/PageError.ts","../../src/library/FetchError.ts"],"sourcesContent":["import { FetchError } from \"./FetchError\";\n\n/**\n * An error created when a method in the page API fails, extends the {@link FetchError}.\n */\nexport class PageError extends FetchError {\n\t/**\n\t * The path requested during the failed page API call.\n\t */\n\tpath: string;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param {string} path - The path requested during the failed page API call.\n\t * @param {FetchError} error - The error returned from the internal fetcher.\n\t */\n\tconstructor(path: string, error: FetchError) {\n\t\tsuper(error);\n\n\t\tthis.path = path;\n\t}\n}\n","/**\n * An error created when the internal fetcher fails.\n */\nexport class FetchError extends Error {\n\t[key: string]: any;\n\t/**\n\t * The message associated with the error.\n\t */\n\tmessage!: string;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param {string | Error} error - The error message or object detected.\n\t */\n\tconstructor(error: string | Error) {\n\t\tsuper();\n\n\t\tif (typeof error === \"string\") {\n\t\t\tthis.message = error;\n\t\t} else {\n\t\t\tObject.keys(error).forEach((key) => {\n\t\t\t\tthis[key] = error[key as keyof typeof error];\n\t\t\t});\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGO,IAAM,aAAN,cAAyB,MAAM;AAAA;AAAA;AAAA;AAAA,EAKrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,OAAuB;AAClC,UAAM;AAEN,QAAI,OAAO,UAAU,UAAU;AAC9B,WAAK,UAAU;AAAA,IAChB,OAAO;AACN,aAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAQ;AACnC,aAAK,GAAG,IAAI,MAAM,GAAyB;AAAA,MAC5C,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ADrBO,IAAM,YAAN,cAAwB,WAAW;AAAA;AAAA;AAAA;AAAA,EAIzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,MAAc,OAAmB;AAC5C,UAAM,KAAK;AAEX,SAAK,OAAO;AAAA,EACb;AACD;","names":[]}