"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/library/EventManager.ts
var EventManager_exports = {};
__export(EventManager_exports, {
  EventManager: () => EventManager
});
module.exports = __toCommonJS(EventManager_exports);
var EventManager = class {
  eventHandlers;
  constructor() {
    this.eventHandlers = {};
  }
  getEventHandlers(eventName) {
    let eventHandlers = this.eventHandlers[eventName];
    if (eventHandlers === void 0) {
      eventHandlers = [];
      this.eventHandlers[eventName] = eventHandlers;
    }
    return eventHandlers;
  }
  /**
   * Adds an event handler for a pre-defined event.
   *
   * @param {EventName} eventName - The name of the event, will match the key of the specific event.
   * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function to be called when the event is triggered.
   */
  on(eventName, handler) {
    let eventHandlers = this.getEventHandlers(eventName);
    eventHandlers.push(handler);
  }
  /**
   * Removes an event handler for a pre-defined event.
   *
   * @param {EventName} eventName - The name of the event, will match the key of the specific event.
   * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function instance to be removed.
   */
  off(eventName, handler) {
    let eventHandlers = this.getEventHandlers(eventName);
    eventHandlers.splice(eventHandlers.indexOf(handler), 1);
  }
  /**
   * Triggers a pre-defined event.
   *
   * @param {Event<EventName, Events[EventName]>} event - The event to be triggered.
   */
  trigger(event) {
    for (let handler of this.getEventHandlers(event.eventName)) {
      handler(event);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EventManager
});
//# sourceMappingURL=EventManager.js.map