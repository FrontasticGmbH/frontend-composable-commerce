import { Event } from './Event.js';

declare class EventManager<Events> {
    protected eventHandlers: Record<string, Array<(event: Event<keyof Events, Events[keyof Events]>) => void>>;
    constructor();
    protected getEventHandlers<EventName extends keyof Events>(eventName: EventName): Array<(event: Event<EventName, Events[EventName]>) => void>;
    /**
     * Adds an event handler for a pre-defined event.
     *
     * @param {EventName} eventName - The name of the event, will match the key of the specific event.
     * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function to be called when the event is triggered.
     */
    on<EventName extends keyof Events>(eventName: EventName, handler: (event: Event<EventName, Events[EventName]>) => void): void;
    /**
     * Removes an event handler for a pre-defined event.
     *
     * @param {EventName} eventName - The name of the event, will match the key of the specific event.
     * @param {(event: Event<EventName, Events[EventName]>) => void} handler - The handler function instance to be removed.
     */
    off<EventName extends keyof Events>(eventName: EventName, handler: (event: Event<EventName, Events[EventName]>) => void): void;
    /**
     * Triggers a pre-defined event.
     *
     * @param {Event<EventName, Events[EventName]>} event - The event to be triggered.
     */
    trigger<EventName extends keyof Events>(event: Event<EventName, Events[EventName]>): void;
}

export { EventManager };
