{"version":3,"sources":["../../../src/library/actions/AccountActions.ts"],"sourcesContent":["import {\n\trememberMeCookieAsync,\n\tEvent,\n\tSDK,\n\tServerOptions,\n} from \"@commercetools/frontend-sdk\";\nimport {\n\tAddAccountAddressPayload,\n\tChangeAccountPasswordPayload,\n\tConfirmAccountPayload,\n\tLoginAccountPayload,\n\tRegisterAccountPayload,\n\tRemoveAccountAddressPayload,\n\tRequestAccountConfirmationEmailPayload,\n\tRequestAccountPasswordResetPayload,\n\tResetAccountPasswordPayload,\n\tSetDefaultAccountBillingAddressPayload,\n\tSetDefaultAccountShippingAddressPayload,\n\tUpdateAccountAddressPayload,\n\tUpdateAccountPayload,\n} from \"../../types/payloads/AccountPayloads\";\nimport {\n\tAddAccountAddressAction,\n\tChangeAccountPasswordAction,\n\tConfirmAccountAction,\n\tGetAccountAction,\n\tGetAccountActionReturn,\n\tLoginAccountAction,\n\tLogoutAccountAction,\n\tRegisterAccountAction,\n\tRemoveAccountAddressAction,\n\tRequestAccountConfirmationEmailAction,\n\tRequestAccountPasswordResetAction,\n\tResetAccountPasswordAction,\n\tSetDefaultAccountBillingAddressAction,\n\tSetDefaultAccountShippingAddressAction,\n\tUpdateAccountAction,\n\tUpdateAccountAddressAction,\n} from \"../../types/actions/AccountActions\";\nimport { Account, Address } from \"shared/types/account\";\nimport { ComposableCommerceEvents } from \"../../types/events/ComposableCommerceEvents\";\n\nexport type AccountActions = {\n\tgetAccount: GetAccountAction;\n\tlogin: LoginAccountAction;\n\tlogout: LogoutAccountAction;\n\tregister: RegisterAccountAction;\n\tconfirm: ConfirmAccountAction;\n\trequestConfirmationEmail: RequestAccountConfirmationEmailAction;\n\tchangePassword: ChangeAccountPasswordAction;\n\trequestResetPassword: RequestAccountPasswordResetAction;\n\tresetPassword: ResetAccountPasswordAction;\n\tupdateAccount: UpdateAccountAction;\n\taddAddress: AddAccountAddressAction;\n\tupdateAddress: UpdateAccountAddressAction;\n\tremoveAddress: RemoveAccountAddressAction;\n\tsetDefaultBillingAddress: SetDefaultAccountBillingAddressAction;\n\tsetDefaultShippingAddress: SetDefaultAccountShippingAddressAction;\n};\n\nconst addressesAreEqual = function (\n\tfirstAddress: Address,\n\tsecondAddress: Address,\n\tcompareIds: boolean\n) {\n\treturn (\n\t\t!compareIds ||\n\t\t(compareIds &&\n\t\t\tfirstAddress.addressId === secondAddress.addressId &&\n\t\t\tfirstAddress.streetName === secondAddress.streetName &&\n\t\t\tfirstAddress.streetNumber === secondAddress.streetNumber &&\n\t\t\tfirstAddress.additionalStreetInfo ===\n\t\t\t\tsecondAddress.additionalStreetInfo &&\n\t\t\tfirstAddress.additionalAddressInfo ===\n\t\t\t\tsecondAddress.additionalAddressInfo &&\n\t\t\tfirstAddress.city === secondAddress.city &&\n\t\t\tfirstAddress.state === secondAddress.state &&\n\t\t\tfirstAddress.country === secondAddress.country &&\n\t\t\tfirstAddress.postalCode === secondAddress.postalCode &&\n\t\t\tfirstAddress.salutation === secondAddress.salutation &&\n\t\t\tfirstAddress.firstName === secondAddress.firstName &&\n\t\t\tfirstAddress.lastName === secondAddress.lastName &&\n\t\t\tfirstAddress.isDefaultBillingAddress ===\n\t\t\t\tsecondAddress.isDefaultBillingAddress &&\n\t\t\tfirstAddress.isDefaultShippingAddress ===\n\t\t\t\tsecondAddress.isDefaultShippingAddress &&\n\t\t\tfirstAddress.phone === secondAddress.phone)\n\t);\n};\n\nexport const getAccountActions = (\n\tsdk: SDK<ComposableCommerceEvents>\n): AccountActions => {\n\treturn {\n\t\tgetAccount: async (options: { serverOptions?: ServerOptions } = {}) => {\n\t\t\tconst response = await sdk.callAction<GetAccountActionReturn>({\n\t\t\t\tactionName: \"account/getAccount\",\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tresponse.isError === false &&\n\t\t\t\tresponse.data.loggedIn &&\n\t\t\t\tresponse.data.account\n\t\t\t) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"accountFetched\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\taccount: response.data.account,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tlogin: async (\n\t\t\tpayload: LoginAccountPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst remember = payload.remember;\n\t\t\tpayload.remember = undefined;\n\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/login\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tif (remember) {\n\t\t\t\t\tawait rememberMeCookieAsync.set(\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\toptions.serverOptions\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"userLoggedIn\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\taccount: response.data,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t},\n\t\tlogout: async (options: { serverOptions?: ServerOptions } = {}) => {\n\t\t\tconst response = await sdk.callAction<void>({\n\t\t\t\tactionName: \"account/logout\",\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tawait rememberMeCookieAsync.remove(options.serverOptions);\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"userLoggedOut\",\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tregister: async (\n\t\t\tpayload: RegisterAccountPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/register\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"userRegistered\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\taccount: response.data,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tconfirm: async (\n\t\t\tpayload: ConfirmAccountPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/confirm\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"accountConfirmed\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\taccount: response.data,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\trequestConfirmationEmail: async (\n\t\t\tpayload: RequestAccountConfirmationEmailPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<void>({\n\t\t\t\tactionName: \"account/requestConfirmationEmail\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"accountConfirmationEmailRequested\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\temail: payload.email,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tchangePassword: async (\n\t\t\tpayload: ChangeAccountPasswordPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/password\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"passwordChanged\",\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\trequestResetPassword: async (\n\t\t\tpayload: RequestAccountPasswordResetPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<void>({\n\t\t\t\tactionName: \"account/requestReset\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"passwordResetRequested\",\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tresetPassword: async (\n\t\t\tpayload: ResetAccountPasswordPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/reset\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"passwordReset\",\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tupdateAccount: async (\n\t\t\tpayload: UpdateAccountPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/update\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tsdk.trigger(\n\t\t\t\t\tnew Event({\n\t\t\t\t\t\teventName: \"accountUpdated\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\taccount: response.data,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\taddAddress: async (\n\t\t\tpayload: AddAccountAddressPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/addAddress\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tconst newAddress = response.data.addresses?.find((address) =>\n\t\t\t\t\taddressesAreEqual(address, payload, false)\n\t\t\t\t);\n\t\t\t\tif (newAddress) {\n\t\t\t\t\tsdk.trigger(\n\t\t\t\t\t\tnew Event({\n\t\t\t\t\t\t\teventName: \"accountAddressAdded\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\taddress: newAddress,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tupdateAddress: async (\n\t\t\tpayload: UpdateAccountAddressPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/updateAddress\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tconst newAddress = response.data.addresses?.find((address) =>\n\t\t\t\t\taddressesAreEqual(address, payload, true)\n\t\t\t\t);\n\t\t\t\tif (newAddress) {\n\t\t\t\t\tsdk.trigger(\n\t\t\t\t\t\tnew Event({\n\t\t\t\t\t\t\teventName: \"accountAddressUpdated\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\taddress: newAddress,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tremoveAddress: async (\n\t\t\tpayload: RemoveAccountAddressPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/removeAddress\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tif (\n\t\t\t\t\t!response.data.addresses?.find(\n\t\t\t\t\t\t(address) => address.addressId === payload.addressId\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tsdk.trigger(\n\t\t\t\t\t\tnew Event({\n\t\t\t\t\t\t\teventName: \"accountAddressRemoved\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\taddressId: payload.addressId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tsetDefaultBillingAddress: async (\n\t\t\tpayload: SetDefaultAccountBillingAddressPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/setDefaultBillingAddress\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tconst address = response.data.addresses?.find(\n\t\t\t\t\t(address) => address.addressId === payload.addressId\n\t\t\t\t);\n\t\t\t\tif (address?.isDefaultBillingAddress) {\n\t\t\t\t\tsdk.trigger(\n\t\t\t\t\t\tnew Event({\n\t\t\t\t\t\t\teventName: \"defaultBillingAddressSet\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\taddress: address,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t\tsetDefaultShippingAddress: async (\n\t\t\tpayload: SetDefaultAccountShippingAddressPayload,\n\t\t\toptions: { serverOptions?: ServerOptions } = {}\n\t\t) => {\n\t\t\tconst response = await sdk.callAction<Account>({\n\t\t\t\tactionName: \"account/setDefaultShippingAddress\",\n\t\t\t\tpayload,\n\t\t\t\tserverOptions: options.serverOptions,\n\t\t\t});\n\n\t\t\tif (response.isError === false) {\n\t\t\t\tconst address = response.data.addresses?.find(\n\t\t\t\t\t(address) => address.addressId === payload.addressId\n\t\t\t\t);\n\t\t\t\tif (address?.isDefaultShippingAddress) {\n\t\t\t\t\tsdk.trigger(\n\t\t\t\t\t\tnew Event({\n\t\t\t\t\t\t\teventName: \"defaultShippingAddressSet\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\taddress: address,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn response;\n\t\t},\n\t};\n};\n"],"mappings":"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","names":["address"]}